var search_data = {"index":{"searchIndex":["cell","game","gameboard","check_direction()","clear()","clear()","final_score()","find_moves()","get_move()","invert!()","mark_possible()","mark_units!()","new()","new()","new()","next_turn()","opposite?()","play_othello()","reset()","to_s()","to_s()","to_s()","update_board()","update_counts()","welcome()","othello"],"longSearchIndex":["cell","game","gameboard","gameboard#check_direction()","cell#clear()","gameboard#clear()","game#final_score()","game#find_moves()","game#get_move()","cell#invert!()","cell#mark_possible()","gameboard#mark_units!()","cell::new()","game::new()","gameboard::new()","game#next_turn()","cell#opposite?()","game#play_othello()","cell#reset()","cell#to_s()","game#to_s()","gameboard#to_s()","game#update_board()","game#update_counts()","game#welcome()",""],"info":[["Cell","","Cell.html","","<p>Class to define the behavior and attributes of each cell on an Othello game\nboard\n"],["Game","","Game.html","","<p>A class that manages the interface between the players, individual moves,\nand the data managed by the …\n"],["GameBoard","","GameBoard.html","","<p>A subclass of Arrays to collect all game cells into a single dimension\narray. Since Othello is played …\n"],["check_direction","GameBoard","GameBoard.html#method-i-check_direction","(startcell,direction)","<p>Check for areas that can be captured by the current player\n"],["clear","Cell","Cell.html#method-i-clear","()","<p>Switch a possible move back to an empty cell state.\n"],["clear","GameBoard","GameBoard.html#method-i-clear","()","<p>Clear the board for the next player\n"],["final_score","Game","Game.html#method-i-final_score","(msg=\"Game over: \")","<p>Display the outcome of the final move.\n"],["find_moves","Game","Game.html#method-i-find_moves","()","<p>Identify all possible moves for the current player\n"],["get_move","Game","Game.html#method-i-get_move","()","<p>Choose one of the possible moves or quit\n"],["invert!","Cell","Cell.html#method-i-invert-21","()","<p>Flip the ownership of a cell to the opposing player.\n"],["mark_possible","Cell","Cell.html#method-i-mark_possible","(direction = 0)","<p>Marks a cell that could be possible move for the current player.\n"],["mark_units!","GameBoard","GameBoard.html#method-i-mark_units-21","(cell,player)","<p>Mark the cells that are captured by the current player\n"],["new","Cell","Cell.html#method-c-new","(position)","<p>Establish a new cell in the gameboard with its label\n"],["new","Game","Game.html#method-c-new","()","<p>Establishing a new game of Othello\n"],["new","GameBoard","GameBoard.html#method-c-new","()","<p>Set up for a new game\n"],["next_turn","Game","Game.html#method-i-next_turn","()","<p>Switch to the next player\n"],["opposite?","Cell","Cell.html#method-i-opposite-3F","(unit)","<p>Returns a Boolean that indicates whether a cell is owned by the opponent of\nthe owner of the base cell. …\n"],["play_othello","Game","Game.html#method-i-play_othello","()","<p>Manage a game of othello between 2 players taking turns\n"],["reset","Cell","Cell.html#method-i-reset","()","<p>Reset the cell back to the initial state and condition for starting a new\ngame.\n"],["to_s","Cell","Cell.html#method-i-to_s","()","<p>Display the content of the cell\n"],["to_s","Game","Game.html#method-i-to_s","()","<p>Display the game board with the status and score\n"],["to_s","GameBoard","GameBoard.html#method-i-to_s","()","<p>Display the game board\n"],["update_board","Game","Game.html#method-i-update_board","()","<p>Register the captures resulting from the unit chosen\n"],["update_counts","Game","Game.html#method-i-update_counts","()","<p>Update the tally of the status of the board\n"],["welcome","Game","Game.html#method-i-welcome","()","<p>Opening message\n"],["othello","","othello_md.html","","<p>othello.rb - A Ruby Othello game application\n<p>Object Library in Ruby for a 2 users to play a game of Othello …\n"]]}}